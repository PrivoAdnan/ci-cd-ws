AWSTemplateFormatVersion: 2010-09-09
Description: Lambda functions for ebs-snapshot management.  CloudWatch Alarm to Privo.


Parameters:

  pAlarmAccountDescription:
    Type: "String"
    Description: "Description of this account to be appended to CloudWatch alarms.  Eg: privo-monitor"
    MinLength: "1"


Metadata:

  AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: "Settings"
          Parameters:
              - "pAlarmAccountDescription"
      ParameterLabels:
        pAlarmAccountDescription:
          default: "Account Description"


Resources:

  EBSBackupPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EBSBackupRule.Arn
      FunctionName: "ebs-enterprise-backup"

  EBSCleanupPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EBSCleanupRule.Arn
      FunctionName: "ebs-enterprise-cleanup"

  EBSBackupRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Daily EBS Snapshot Backup"
      Name: "ebs-enterprise-backup"
      ScheduleExpression: "cron(0 5 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt EBSBackupLambda.Arn
          Id: "1"

  EBSCleanupRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Daily EBS Snapshot Clenaup"
      Name: "ebs-enterprise-cleanup"
      ScheduleExpression: "cron(0 7 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt EBSCleanupLambda.Arn
          Id: "1"

  EBSBackupErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Join [ "", [ "arn:aws:sns:", !Ref "AWS::Region", ":458419666758:backup-alerts" ]]  # Privo-monitor account
      AlarmDescription: !Join [ "", [ "ebs-enterprise-backup invocation error", " - ", !Ref pAlarmAccountDescription ]]
      AlarmName: "ebs-enterprise-backup-errors"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: "FunctionName"
          Value: "ebs-enterprise-backup"
      EvaluationPeriods: 1
      MetricName: "Errors"
      Namespace: "AWS/Lambda"
      Period: 300
      Statistic: "Average"
      Threshold: 1.0
      TreatMissingData: "notBreaching"

  EBSCleanupErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Join [ "", [ "arn:aws:sns:", !Ref "AWS::Region", ":458419666758:backup-alerts" ]]  # Privo-monitor account
      AlarmDescription: !Join [ "", [ "ebs-enterprise-cleanup invocation error", " - ", !Ref pAlarmAccountDescription ]]
      AlarmName: "ebs-enterprise-cleanup-errors"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: "FunctionName"
          Value: "ebs-enterprise-cleanup"
      EvaluationPeriods: 1
      MetricName: "Errors"
      Namespace: "AWS/Lambda"
      Period: 300
      Statistic: "Average"
      Threshold: 1.0
      TreatMissingData: "notBreaching"

  EBSBackupWorkerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "ebs-backup-worker"
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }

  EBSBackupWorkerPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref EBSBackupWorkerRole
      PolicyName:  EBSBackupWorkerPolicy
      PolicyDocument:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "logs:*"
                    ],
                    "Resource": "arn:aws:logs:*:*:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "iam:GetUser",
                        "iam:GetRole"
                    ],
                    "Resource": [
                        "*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeInstances",
                        "ec2:DescribeSnapshots",
                        "ec2:CreateSnapshot",
                        "ec2:DeleteSnapshot",
                        "ec2:CreateTags",
                        "ec2:ModifySnapshotAttribute",
                        "ec2:ResetSnapshotAttribute"
                    ],
                    "Resource": [
                        "*"
                    ]
                }
            ]
        }

  EBSBackupLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join ["-", ["privo-public-lambda", !Ref "AWS::Region" ]]
        S3Key: "lambda/ebs-backups/ebs-enterprise-backup-0.0.zip"
      Description: "Snapshots EBS Volumes"
      FunctionName: "ebs-enterprise-backup"
      Handler: "ebs-enterprise-backup.backup_handler"
      Role: !GetAtt EBSBackupWorkerRole.Arn
      Runtime: "python2.7"
      Timeout: 180
      Tags:
        - Key: "managed-by"
          Value: "cloudformation"

  EBSCleanupLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join ["-", ["privo-public-lambda", !Ref "AWS::Region" ]]
        S3Key: "lambda/ebs-backups/ebs-enterprise-cleanup-0.0.zip"
      Description: "Removes Expired EBS Snapshots"
      FunctionName: "ebs-enterprise-cleanup"
      Handler: "ebs-enterprise-cleanup.cleanup_handler"
      Role: !GetAtt EBSBackupWorkerRole.Arn
      Runtime: "python2.7"
      Timeout: 180
      Tags:
        - Key: "managed-by"
          Value: "cloudformation"


Outputs:

  Version:
    Value: "lambda-ebs-enterprise-backups-0.0"
    Description: "Template Version"
